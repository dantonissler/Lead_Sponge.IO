package com.leadsponge.IO.Controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.leadsponge.IO.models.Cliente;
import com.leadsponge.IO.repository.ClienteRepository;

@RestController
@RequestMapping("/clientes")
public class ClienteController {

	@Autowired
	private final ClienteRepository repository;

	ClienteController(ClienteRepository repository) {
		this.repository = repository;
	}

	@GetMapping("/")
	List<Cliente> listar() {
		return repository.findAll();
	}

	@PostMapping("/")
	Cliente cadastrar(@RequestBody Cliente cliente) {
		return repository.save(cliente);
	}

	@GetMapping("/{id}")
	Cliente detalhar(@PathVariable Long id) {
		return repository.findById(id).orElseThrow(() -> new ClienteNotFoundException(id));
	}

	@PutMapping("/{id}")
	Cliente editar(@RequestBody Cliente novoCliente, @PathVariable Long id) {
		return repository.findById(id).map(cliente -> {
			cliente.setNome(novoCliente.getNome());
			cliente.setResumo(novoCliente.getResumo());
			cliente.setSegmento(novoCliente.getSegmento());
			return repository.save(cliente);
		}).orElseGet(() -> {
			novoCliente.setId(id);
			return repository.save(novoCliente);
		});
	}

	@DeleteMapping("/{id}")
	void deletar(@PathVariable Long id) {
		repository.deleteById(id);
	}
//	@Autowired
//	private ClienteRepository repository;
//
//	ClienteResource(ClienteRepository repository) {
//		this.repository = repository;
//	}
//
//	@GetMapping("/")
//	public ResponseEntity<Iterable<Cliente>> listar() {
//		Iterable<Cliente> clientes = repository.findAll();
//		if (clientes == null) {
//			return ResponseEntity.notFound().build();
//		} else {
//			return ResponseEntity.ok(clientes);
//		}
//	}
//
//	@PostMapping("/cadastrar")
//	public ResponseEntity<Cliente> cadastrar(@RequestBody Cliente cliente) throws URISyntaxException {
//		Cliente criarCliente = repository.save(cliente);
//		if (criarCliente == null) {
//			return ResponseEntity.notFound().build();
//		} else {
//			URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path("/cliente/cadastrar")
//					.buildAndExpand(criarCliente.getId()).toUri();
//
//			return ResponseEntity.created(uri).body(criarCliente);
//		}
//	}
//
//	@GetMapping("/{id}")
//	public ResponseEntity<Cliente> detalhar(@PathVariable("id") Long id) {
//		Cliente cliente = repository.findById(id);
//		if (cliente == null) {
//			return ResponseEntity.notFound().build();
//		} else {
//			return ResponseEntity.ok(cliente);
//		}
//	}
//
//	@PutMapping("/editar/{id}")
//	public ResponseEntity<Cliente> editar(@RequestBody Cliente cliente, @PathVariable("id") Long id, String nome,
//			String segmento, String url, String resumo) {
//		Cliente clienteEdit = repository.findById(id);
//		clienteEdit.setNome(nome);
//		clienteEdit.setSegmento(segmento);
//		clienteEdit.setUrl(url);
//		clienteEdit.setResumo(resumo);
//		repository.save(clienteEdit);
//		return ResponseEntity.ok(clienteEdit);
//	}
//
//	@DeleteMapping("/deletar")
//	public ResponseEntity<Cliente> deletar(@PathVariable Long id) {
//		Cliente cliente = repository.findById(id);
//		repository.delete(cliente);
//		return ResponseEntity.noContent().build();
//	}
}
