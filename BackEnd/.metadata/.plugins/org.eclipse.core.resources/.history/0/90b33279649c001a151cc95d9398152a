package com.leadsponge.IO.controllers;

import java.net.URI;
import java.net.URISyntaxException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.leadsponge.IO.errorValidate.ResourceNotFoundException;
import com.leadsponge.IO.models.Email;
import com.leadsponge.IO.models.Oportunidade;
import com.leadsponge.IO.repository.EmailRepository;

@RestController @RequestMapping("/emails")
public class EmailController {
	@Autowired
	private final EmailRepository repository;

	EmailController(EmailRepository repository) {
		this.repository = repository;
	}

	@GetMapping(value = { "" , "/" })
	ResponseEntity<Iterable<Email>> listar() {
		Iterable<Email> email = repository.findAll();
		if (email == null) {
			return ResponseEntity.notFound().build();
		} else {
			return ResponseEntity.ok(email);
		}
	}


	@PostMapping(value = { "", "/" })
	ResponseEntity<Email> cadastrar(@RequestBody Email email) throws URISyntaxException {
		Email criarEmail = repository.save(email);
		if (criarEmail == null) {
			return ResponseEntity.notFound().build();
		} else {
			URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
					.buildAndExpand(criarEmail.getId()).toUri();
			return ResponseEntity.created(uri).body(criarEmail);
		}
	}

	@GetMapping(value = { "/{id}" , "/{id}/" })
	ResponseEntity<Email> detalhar(@PathVariable("id") Long id) {
		return ResponseEntity.ok(repository.findById(id).orElseThrow(() -> notFouldId(id)));
	}
	@PutMapping(value = { "/{id}" , "/{id}/" })
	ResponseEntity<Email> editar(@RequestBody Email novoEmail, @PathVariable Long id) {
		return ResponseEntity.ok(repository.findById(id).map(email -> {
			email.setEmail(novoEmail.getEmail());
			return repository.save(email);
		}).orElseThrow(() -> notFouldId(id)));
	}

	@DeleteMapping(value = { "/{id}" , "/{id}/" })
	ResponseEntity<Oportunidade> deletar(@PathVariable Long id) {
		try {
			repository.deleteById(id);
			return ResponseEntity.noContent().build();
		} catch (Exception e) {
			throw notFouldId(id);
		}
	}
	private ResourceNotFoundException notFouldId(Long id) {
		return new ResourceNotFoundException("NÃ£o foi possivel encontrar o contato com o id: " + id);
	}
}
