package com.leadsponge.IO.service.impl;

import java.util.Collection;
import java.util.HashSet;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import com.leadsponge.IO.models.Role;
import com.leadsponge.IO.models.Usuario;
import com.leadsponge.IO.repository.UsuarioRepository;

@Service
public class ImplementsUserDetailsService implements UserDetailsService {

	@Autowired
	private UsuarioRepository ur;

	@Override
	public UserDetails loadUserByUsername(String login) throws UsernameNotFoundException {
		Usuario usuario = ur.findByLogin(login);
		if (usuario == null) throw new UsernameNotFoundException("Usuario n√£o encontrado!");
		
		Set<GrantedAuthority> grantedAuthorities = new HashSet<>();
        for (Role role : usuario.getRoles()){
            grantedAuthorities.add(new SimpleGrantedAuthority(role.getNomeRole()));
        }
		return new org.springframework.security.core.userdetails.User(usuario.getUsername(), usuario.getPassword(), grantedAuthorities);
	}
	
	private Collection<? extends GrantedAuthority> getRole(Usuario usuario) {
		Set<SimpleGrantedAuthority> authorities = new HashSet<>();
		usuario.getRoles().forEach(p -> authorities.add(new SimpleGrantedAuthority(p.getNome().toUpperCase())));
		return authorities;
	}

}
