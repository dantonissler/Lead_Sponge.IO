package com.leadsponge.IO.endPoints;

import java.net.URI;
import java.net.URISyntaxException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.leadsponge.IO.endPoints.crudEndpoints.CrudController;
import com.leadsponge.IO.models.Telefone;
import com.leadsponge.IO.repository.TelefoneRepository;

@RestController
@RequestMapping("/telefones")
public class TelefoneEndPoints extends CrudController {
	@Autowired
	private final TelefoneRepository repository;

	TelefoneEndPoints(TelefoneRepository repository) {
		this.repository = repository;
	}

	@GetMapping(value = { "", "/" })
	public ResponseEntity<Iterable<?>> listar() {
		Iterable<Telefone> telefone = repository.findAll();
		if (telefone == null) {
			return ResponseEntity.notFound().build();
		} else {
			return ResponseEntity.ok(telefone);
		}
	}

	@PostMapping(value = { "", "/" })
	ResponseEntity<Telefone> cadastrar(@RequestBody Telefone telefone) throws URISyntaxException {
		Telefone criartelefone = repository.save(telefone);
		if (criartelefone == null) {
			return ResponseEntity.notFound().build();
		} else {
			URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
					.buildAndExpand(criartelefone.getId()).toUri();
			return ResponseEntity.created(uri).body(criartelefone);
		}
	}

	@GetMapping(value = { "/{id}", "/{id}/" })
	public ResponseEntity<Telefone> detalhar(@PathVariable("id") Long id) {
		return ResponseEntity.ok(repository.findById(id).orElseThrow(() -> notFouldId(id, "o telefone")));
	}

	@PutMapping(value = { "/{id}", "/{id}/" })
	Telefone editar(@RequestBody Telefone novoTelefone, @PathVariable Long id) {
		return repository.findById(id).map(telefone -> {
			telefone.setTelefone(novoTelefone.getTelefone());
			telefone.setTipo(novoTelefone.getTipo());
			return repository.save(telefone);
		}).orElseThrow(() -> notFouldId(id, "o telefone"));
	}

	@DeleteMapping(value = { "/{id}", "/{id}/" })
	public ResponseEntity<Telefone> deletar(@PathVariable Long id) {
		try {
			repository.deleteById(id);
			return ResponseEntity.noContent().build();
		} catch (Exception e) {
			throw notFouldId(id, "o telefone");
		}
	}
}
