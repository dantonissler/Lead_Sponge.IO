package com.leadsponge.IO.endPoints;

import java.net.URI;
import java.net.URISyntaxException;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.leadsponge.IO.endPoints.crudController.CrudController;
import com.leadsponge.IO.models.Oportunidade;
import com.leadsponge.IO.models.Role;
import com.leadsponge.IO.repository.RoleRepository;

@RestController
@CrossOrigin
@RequestMapping("/roles")
class RoleController extends CrudController {

	@Autowired
	private final RoleRepository repository;

	RoleController(RoleRepository repository) {
		this.repository = repository;
	}

	@Override
	public ResponseEntity<Iterable<?>> listar() {
		Iterable<Role> role = repository.findAll();
		if (role == null) {
			return ResponseEntity.notFound().build();
		} else {
			return ResponseEntity.ok(role);
		}
	}

	@PostMapping(value = { "", "/" })
	ResponseEntity<Role> cadastrar(@Valid @RequestBody Role role) throws URISyntaxException {
		Role criarRole = repository.save(role);
		if (criarRole == null) {
			return ResponseEntity.notFound().build();
		} else {
			URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(criarRole.getId())
					.toUri();
			return ResponseEntity.created(uri).body(criarRole);
		}
	}

	@Override
	public ResponseEntity<Role> detalhar(@PathVariable("id") Long id) {
		return ResponseEntity.ok(repository.findById(id).orElseThrow(() -> notFouldId(id, "a regra")));
	}

	@PutMapping(value = { "/{id}", "/{id}/" })
	ResponseEntity<Role> editar(@Valid @RequestBody Role newRole, @PathVariable Long id) {
		return ResponseEntity.ok(repository.findById(id).map(role -> {
			role.setNome(newRole.getNome());
			return repository.save(role);
		}).orElseThrow(() -> notFouldId(id, "a regra")));
	}

	@Override
	public ResponseEntity<Oportunidade> deletar(@PathVariable Long id) {
		try {
			repository.deleteById(id);
			return ResponseEntity.noContent().build();
		} catch (Exception e) {
			throw notFouldId(id, "a regra");
		}
	}
}
