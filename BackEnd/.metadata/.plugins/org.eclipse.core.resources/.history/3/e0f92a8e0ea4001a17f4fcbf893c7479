package com.leadsponge.IO.security.service;

import java.util.Collection;
import java.util.HashSet;
import java.util.Optional;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import com.leadsponge.IO.errorValidate.ResourceBadRequestException;
import com.leadsponge.IO.models.Role;
import com.leadsponge.IO.models.Usuario;
import com.leadsponge.IO.repository.RoleRepository;
import com.leadsponge.IO.repository.UsuarioRepository;
import com.leadsponge.IO.security.service.exception.UsuarioInativaException;

@Service
public class UsuarioService{
    @Autowired
    private UsuarioRepository usuarioRepository;
    @Autowired
    private RoleRepository roleRepository;
    @Autowired
    private BCryptPasswordEncoder bCryptPasswordEncoder;

    public Usuario save(Usuario usuario) {
    	
    	
		} else if (!usuario.getConfirmarPass().equals(usuario.getSenha())) {
			throw new ResourceBadRequestException("O campo de senha n√£o corresponde com o confirmar senha.");
		} else if (usuarioService.findByLogin(usuario.getLogin()) != null) {
			throw new ResourceBadRequestException("Login em uso.");
    	
    	
//    	validarRole(usuario);
		usuarioAtivo(usuario);
    	usuario.setPassword(bCryptPasswordEncoder.encode(usuario.getPassword()));
    	usuario.setRoles(new HashSet<>(roleRepository.findAll()));
        return usuarioRepository.save(usuario);
    }
	
	public Usuario atualizar(Long id, Usuario usuario) {
		Usuario usuarioSalvo = buscarUsuarioExistente(id);
		
//		if (!usuario.getPessoa().equals(usuarioSalvo.getPessoa())) {
//			validarRole(usuario);
//		}
		BeanUtils.copyProperties(usuario, usuarioSalvo, "codigo");
		return usuarioRepository.save(usuarioSalvo);
	}

//	private void validarRole(Usuario usuario) {
//		Role role = null;
//		if (usuario.getAuthorities().g != null) {
//			role = roleRepository.getOne(usuario.getAuthorities());
//		}
//	}

	private Usuario buscarUsuarioExistente(Long id) {
		Optional<Usuario> usuarioSalvo = usuarioRepository.findById(id);
		if (!usuarioSalvo.isPresent()) {
			throw new IllegalArgumentException();
		}
		return usuarioSalvo.get();
	}
	
	private void usuarioAtivoExiste(Usuario usuario) {
		if (usuario == null || usuario.isEnabled()) {
			throw new UsuarioInativaException();
		}
	}

}
