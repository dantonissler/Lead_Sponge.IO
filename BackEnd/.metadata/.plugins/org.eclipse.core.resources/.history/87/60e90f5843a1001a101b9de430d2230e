package com.leadsponge.IO.endPoints;

import java.net.URISyntaxException;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.leadsponge.IO.endPoints.crudEndpoints.CrudController;
import com.leadsponge.IO.event.RecursoCriadoEvent;
import com.leadsponge.IO.models.Oportunidade;
import com.leadsponge.IO.repository.OportunidadeRepository;

@RestController
@RequestMapping("/oportunidades")
public class OportunidadeEndPoints extends CrudController {

	@Autowired
	private final OportunidadeRepository repository;
	
	@Autowired
	private final ApplicationEventPublisher publisher;
	
	public OportunidadeEndPoints(OportunidadeRepository repository, ApplicationEventPublisher publisher) {
		 this.publisher = publisher;
		 this.repository = repository; 
	}
	
	@GetMapping(value = { "", "/" })
	@PreAuthorize("hasAuthority('ROLE_PESQUISAR_OPORTUNIDADE') and #oauth2.hasScope('read')")
	public ResponseEntity<Iterable<?>> listar() {
		Iterable<Oportunidade> oportunidade = repository.findAll();
		if (oportunidade == null) {
			return ResponseEntity.notFound().build();
		} else {
			return ResponseEntity.ok(oportunidade);
		}
	}

	@PostMapping(value = { "", "/" })
	@PreAuthorize("hasAuthority('ROLE_CADASTRAR_OPORTUNIDADE') and #oauth2.hasScope('write')")
	ResponseEntity<Oportunidade> cadastrar(@Valid @RequestBody Oportunidade oportunidade, HttpServletResponse response) throws URISyntaxException {
		Oportunidade criaroportunidade = repository.save(oportunidade);
		if (criaroportunidade == null) {
			return ResponseEntity.notFound().build();
		} else {
			publisher.publishEvent(new RecursoCriadoEvent(this, response, criaroportunidade.getId()));
			return ResponseEntity.status(HttpStatus.CREATED).body(criaroportunidade);
		}
	}

	@GetMapping(value = { "/{id}", "/{id}/" })
	@PreAuthorize("hasAuthority('ROLE_PESQUISAR_OPORTUNIDADE') and #oauth2.hasScope('read')")
	public ResponseEntity<Oportunidade> detalhar(@Valid @PathVariable("id") Long id) {
		return ResponseEntity.ok(repository.findById(id).orElseThrow(() -> notFouldId(id, "a oportunidade")));
	}

	@PutMapping(value = { "/{id}", "/{id}/" })
	@PreAuthorize("hasAuthority('ROLE_CADASTRAR_OPORTUNIDADE') and #oauth2.hasScope('write')")
	Oportunidade editar(@RequestBody Oportunidade novoOportunidade, @PathVariable Long id) {
		return repository.findById(id).map(oportunidade -> {
			oportunidade.setNome(novoOportunidade.getNome());
			oportunidade.setFonte(novoOportunidade.getFonte());
			return repository.save(oportunidade);
		}).orElseThrow(() -> notFouldId(id, "a oportunidade"));
	}

	@DeleteMapping(value = { "/{id}", "/{id}/" })
	@PreAuthorize("hasAuthority('ROLE_REMOVER_OPORTUNIDADE') and #oauth2.hasScope('write')")
	public ResponseEntity<Oportunidade> remover(@PathVariable Long id) {
		try {
			repository.deleteById(id);
			return ResponseEntity.noContent().build();
		} catch (Exception e) {
			throw notFouldId(id, "a oportunidade");
		}
	}
}
