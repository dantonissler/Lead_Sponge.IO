package com.leadsponge.IO.security.controllers;

import java.net.URI;
import java.net.URISyntaxException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.leadsponge.IO.models.Oportunidade;
import com.leadsponge.IO.security.models.Usuario;
import com.leadsponge.IO.security.repository.UsuarioRepositry;

@RestController
@RequestMapping("/usuario")
public class UsuarioController {

	@Autowired
	private final UsuarioRepositry repository;

	UsuarioController(UsuarioRepositry repository) {
		this.repository = repository;
	}

	@GetMapping(value = { "" , "/" })
	ResponseEntity<Iterable<Usuario>> listar() {
		Iterable<Usuario> usuario = repository.findAll();
		if (usuario == null) {
			return ResponseEntity.notFound().build();
		} else {
			return ResponseEntity.ok(usuario);
		}
	}

	@PostMapping(value = { "" , "/" })
	ResponseEntity<Usuario> cadastrar(@RequestBody Usuario usuario) throws URISyntaxException {
		Usuario criarUsuario = repository.save(usuario);
		if (criarUsuario == null) {
			return ResponseEntity.notFound().build();
		} else {
			URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
					.buildAndExpand(criarUsuario.getId()).toUri();
			return ResponseEntity.created(uri).body(criarUsuario);
		}
	}

	@GetMapping(value = { "/{id}" , "/{id}/" })
	ResponseEntity<Usuario> detalhar(@PathVariable("id") Long id) {
		return ResponseEntity.ok(repository.findById(id).orElseThrow(() -> new UsuarioNotFoundException(id)));
	}

	@PutMapping(value = { "/{id}" , "/{id}/" })
	Usuario editar(@RequestBody Usuario novoUsuario, @PathVariable Long id) {
		return repository.findById(id).map(usuario -> {
			usuario.setLogin(novoUsuario.getLogin());
			usuario.setNomeCompleto(novoUsuario.getNomeCompleto());
			usuario.setEmail(novoUsuario.getEmail());
			usuario.setSenha(novoUsuario.getSenha());
			usuario.setConfirmarSenha(novoUsuario.getConfirmarSenha());
			return repository.save(usuario);
		}).orElseGet(() -> {
			novoUsuario.setId(id);
			return repository.save(novoUsuario);
		});
	}

	@DeleteMapping(value = { "/{id}" , "/{id}/" })
	ResponseEntity<Oportunidade> deletar(@PathVariable Long id) {
		repository.deleteById(id);
		return ResponseEntity.noContent().build();
	}
}
