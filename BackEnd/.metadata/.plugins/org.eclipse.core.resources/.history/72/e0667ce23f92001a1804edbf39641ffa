package com.leadsponge.IO.resource;

import java.net.URI;
import java.net.URISyntaxException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.leadsponge.IO.models.Cliente;
import com.leadsponge.IO.repository.ClienteRepository;
import com.leadsponge.IO.security.repository.RoleRepository;

@RestController
@RequestMapping("/clientes")
public class ClienteResource {

	@Autowired
	private ClienteRepository repository;
	
	ClienteResource(ClienteRepository repository) {
		this.repository = repository;
	}

	@GetMapping("/")
	public ResponseEntity<Iterable<Cliente>> listar() {
		Iterable<Cliente> clientes = cr.findAll();
		if (clientes == null) {
			return ResponseEntity.notFound().build();
		} else {
			return ResponseEntity.ok(clientes);
		}
	}

	@PostMapping("/cadastrar")
	public ResponseEntity<Cliente> cadastrar(@RequestBody Cliente cliente) throws URISyntaxException {
		Cliente criarCliente = cr.save(cliente);
		if (criarCliente == null) {
			return ResponseEntity.notFound().build();
		} else {
			URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path("/cliente/cadastrar")
					.buildAndExpand(criarCliente.getId()).toUri();

			return ResponseEntity.created(uri).body(criarCliente);
		}
	}

	@GetMapping("/{id}")
	public ResponseEntity<Cliente> detalhar(@PathVariable("id") Long id) {
		Cliente cliente = cr.findById(id);
		if (cliente == null) {
			return ResponseEntity.notFound().build();
		} else {
			return ResponseEntity.ok(cliente);
		}
	}

	@PutMapping("/editar/{id}")
	public ResponseEntity<Cliente> editar(@RequestBody Cliente cliente, @PathVariable("id") Long id, String nome,
			String segmento, String url, String resumo) {
		Cliente clienteEdit = cr.findById(id);
		clienteEdit.setNome(nome);
		clienteEdit.setSegmento(segmento);
		clienteEdit.setUrl(url);
		clienteEdit.setResumo(resumo);
		cr.save(clienteEdit);
		return ResponseEntity.ok(clienteEdit);
	}

	@DeleteMapping("/deletar")
	public ResponseEntity<Cliente> deletar(@PathVariable Long id) {
		Cliente cliente = cr.findById(id);
		cr.delete(cliente);
		return ResponseEntity.noContent().build();
	}
}
