package com.leadsponge.IO.endPoints;

import java.net.URI;
import java.net.URISyntaxException;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.leadsponge.IO.endPoints.crudEndpoints.CrudController;
import com.leadsponge.IO.models.Cliente;
import com.leadsponge.IO.repository.ClienteRepository;

@RestController
@RequestMapping("/clientes")
@CrossOrigin(/*origins = "http://localhost:4200"*/)
public class ClienteEndPoints extends CrudController {

	@Autowired
	private final ClienteRepository repository;

	ClienteEndPoints(ClienteRepository repository) {
		this.repository = repository;
	}

	@Override
	public ResponseEntity<Iterable<?>> listar() {
		Iterable<Cliente> clientes = repository.findAll();
		if (clientes == null) {
			return ResponseEntity.notFound().build();
		} else {
			return ResponseEntity.ok(clientes);
		}
	}

	@PostMapping(value = { "", "/" })
	ResponseEntity<Cliente> cadastrar(@Valid @RequestBody Cliente cliente) throws URISyntaxException {
		Cliente criarCliente = repository.save(cliente);
		if (criarCliente == null) {
			return ResponseEntity.notFound().build();
		} else {
			URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
					.buildAndExpand(criarCliente.getId()).toUri();
			return ResponseEntity.created(uri).body(criarCliente);
		}
	}

	@Override
	public ResponseEntity<Cliente> detalhar(@PathVariable("id") Long id) {
		return ResponseEntity.ok(repository.findById(id).orElseThrow(() -> notFouldId(id, "o cliente")));
	}

	@PutMapping(value = { "/{id}", "/{id}/" })
	ResponseEntity<Cliente> editar(@Valid @RequestBody Cliente novoCliente, @PathVariable Long id) {
		return ResponseEntity.ok(repository.findById(id).map(cliente -> {
			cliente.setNome(novoCliente.getNome());
			cliente.setResumo(novoCliente.getResumo());
			cliente.setUrl(novoCliente.getUrl());
			cliente.setSegmento(novoCliente.getSegmento());
			return repository.save(cliente);
		}).orElseThrow(() -> notFouldId(id, "o cliente")));
	}

	@Override
	public ResponseEntity<Cliente> deletar(@PathVariable Long id) {
		try {
			repository.deleteById(id);
			return ResponseEntity.noContent().build();
		} catch (Exception e) {
			throw notFouldId(id, "o cliente");
		}
	}
}
